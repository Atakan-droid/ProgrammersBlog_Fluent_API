@using Core.Utilities.Results.Complex_Types
@model Entities.Dtos.CategoryListDto
@{
    Layout = "_Layout";
    ViewBag.Title = "Kategoriler Index";
}
@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kategoriler
        </div>
        <div class="card-body">

            <div class="spinner-border" role="status" style="display:none;">
                <span class="sr-only">Yükleniyor...</span>
            </div>

            <div class="table-responsive">
                <table class="table table-bordered" id="categoriesTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif Mi?</th>
                            <th>Silinmiş Mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı</th>
                            <th>Son Düzünelenme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>ID</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif Mi?</th>
                            <th>Silinmiş Mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı</th>
                            <th>Son Düzünelenme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>İşlemler</th>
                        </tr>
                    </tfoot>

                    <tbody>
                        @foreach (var item in Model.Categories)
                        {
                            <tr name="@item.Id">
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>@item.IsActive</td>
                                <td>@item.IsDeleted</td>
                                <td>@item.Note</td>
                                <td>@item.CreatedDate.ToShortDateString()</td>
                                <td>@item.CreatedByName</td>
                                <td>@item.ModifiedDate.ToShortDateString()</td>
                                <td>@item.ModifiedByName</td>
                                <td>
                                    <button class="btn btn-primary btn-block btn-sm btn-update" data-id="@item.Id"> <span class="fas fa-edit"></span>Düzenle</button>
                                    <button class="btn btn-danger btn-delete btn-block btn-sm" data-id="@item.Id"> <span class="fas fa-minus-circle"></span> Sil</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (Model.ResultStatus == ResultStatus.Error)
{

    <div class="alert alert-danger mt-2">
        @Model.Message <br />
        Dashboard sayfasına geri dönmek için lütfen <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız</a>
    </div>
}
@section Scripts{
    <script>
        $(document).ready(function () {
            $(`#categoriesTable`).DataTable({
                dom:
                    "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                buttons: [
                    {
                        text: 'Ekle',
                        attr: {
                            id:"btnAdd",
                        },
                        className:'btn btn-success',
                        action: function (e, dt, node, config) {

                        }
                    },
                    {
                        text: 'Yenile',
                        className:'btn btn-warning',
                        action: function (e, dt, node, config) {
                            $.ajax({
                                type: 'GET',
                                url: '@Url.Action("GetAllCategories","Category")',
                                contentType: "application/json",
                                beforeSend: function () {
                                    $('#categoriesTable').hide();
                                    $('.spinner-border').show();
                                },
                                success: function (data) {
                                    const categoryListDto = jQuery.parseJSON(data);
                                    if (categoryListDto.ResultStatus === 0) {
                                        let tableBody = "";
                                        $.each(categoryListDto.Categories.$values,
                                            function (index, category) {
                                                tableBody += `
                                                 <tr>
                                                <td>${category.Id}</td>
                                                <td>${category.Name}</td>
                                                <td>${category.Description}</td>
                                                <td>${convertFirstLetterToUpperCase(category.IsActive.toString())}</td>
                                                <td>${convertFirstLetterToUpperCase(category.IsDeleted.toString())}</td>
                                                <td>${category.Note}</td>
                                                <td>${convertToShortDate(category.CreatedDate)}</td>
                                                <td>${category.CreatedByName}</td>
                                                <td>${convertToShortDate(category.ModifieddDate)}</td>
                                                <td>${category.ModifiedByName}</td>
                                                <td>
                                                <button class="btn btn-primary  btn-block btn-sm btn-update"  data-id="${category.Id}"> <span class="fas fa-edit"></span>Düzenle</button>
                                                <button class="btn btn-danger btn-delete  btn-block btn-sm" data-id="${category.Id}"> <span class="fas fa-minus-circle"></span> Sil</button>
                                                </td>
                                                </tr>
                                                `;
                                            });
                                        $('#categoriesTable > tbody').replaceWith(tableBody);
                                        $('.spinner-border').hide();
                                        $('#categoriesTable').fadeIn(1400);

                                    }
                                    else {
                                        toastr.error(`${categoryListDto.Message}`, 'İşlem Başarısız !');
                                    }
                                },
                                error: function (err) {
                                    console.log(err);
                                    $('.spinner-border').hide();
                                    $('#categoriesTable').fadeIn(1000);
                                    toastr.error(`${err.responseText}`, 'Hata')
                                }
                            })
                        }
                    }
                ],
                language: {
                    "emptyTable": "Tabloda herhangi bir veri mevcut değil",
                    "info": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                    "infoEmpty": "Kayıt yok",
                    "infoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                    "infoThousands": ".",
                    "lengthMenu": "Sayfada _MENU_ kayıt göster",
                    "loadingRecords": "Yükleniyor...",
                    "processing": "İşleniyor...",
                    "search": "Ara:",
                    "zeroRecords": "Eşleşen kayıt bulunamadı",
                    "paginate": {
                        "first": "İlk",
                        "last": "Son",
                        "next": "Sonraki",
                        "previous": "Önceki"
                    },
                    "aria": {
                        "sortAscending": ": artan sütun sıralamasını aktifleştir",
                        "sortDescending": ": azalan sütun sıralamasını aktifleştir"
                    },
                    "select": {
                        "rows": {
                            "_": "%d kayıt seçildi",
                            "1": "1 kayıt seçildi",
                            "0": "-"
                        },
                        "0": "-",
                        "1": "%d satır seçildi",
                        "2": "-",
                        "_": "%d satır seçildi",
                        "cells": {
                            "1": "1 hücre seçildi",
                            "_": "%d hücre seçildi"
                        },
                        "columns": {
                            "1": "1 sütun seçildi",
                            "_": "%d sütun seçildi"
                        }
                    },
                    "autoFill": {
                        "cancel": "İptal",
                        "fillHorizontal": "Hücreleri yatay olarak doldur",
                        "fillVertical": "Hücreleri dikey olarak doldur",
                        "info": "-",
                        "fill": "Bütün hücreleri <i>%d<\/i> ile doldur"
                    },
                    "buttons": {
                        "collection": "Koleksiyon <span class=\"ui-button-icon-primary ui-icon ui-icon-triangle-1-s\"><\/span>",
                        "colvis": "Sütun görünürlüğü",
                        "colvisRestore": "Görünürlüğü eski haline getir",
                        "copySuccess": {
                            "1": "1 satır panoya kopyalandı",
                            "_": "%ds satır panoya kopyalandı"
                        },
                        "copyTitle": "Panoya kopyala",
                        "csv": "CSV",
                        "excel": "Excel",
                        "pageLength": {
                            "-1": "Bütün satırları göster",
                            "1": "-",
                            "_": "%d satır göster"
                        },
                        "pdf": "PDF",
                        "print": "Yazdır",
                        "copy": "Kopyala",
                        "copyKeys": "Tablodaki veriyi kopyalamak için CTRL veya u2318 + C tuşlarına basınız. İptal etmek için bu mesaja tıklayın veya escape tuşuna basın."
                    },
                    "infoPostFix": "-",
                    "searchBuilder": {
                        "add": "Koşul Ekle",
                        "button": {
                            "0": "Arama Oluşturucu",
                            "_": "Arama Oluşturucu (%d)"
                        },
                        "condition": "Koşul",
                        "conditions": {
                            "date": {
                                "after": "Sonra",
                                "before": "Önce",
                                "between": "Arasında",
                                "empty": "Boş",
                                "equals": "Eşittir",
                                "not": "Değildir",
                                "notBetween": "Dışında",
                                "notEmpty": "Dolu"
                            },
                    "number": {
                                "between": "Arasında",
                                "empty": "Boş",
                                "equals": "Eşittir",
                                "gt": "Büyüktür",
                                "gte": "Büyük eşittir",
                                "lt": "Küçüktür",
                                "lte": "Küçük eşittir",
                                "not": "Değildir",
                                "notBetween": "Dışında",
                                "notEmpty": "Dolu"
                            },
                            "string": {
                                "contains": "İçerir",
                                "empty": "Boş",
                                "endsWith": "İle biter",
                                "equals": "Eşittir",
                                "not": "Değildir",
                                "notEmpty": "Dolu",
                                "startsWith": "İle başlar"
                            },
                            "array": {
                                "contains": "İçerir",
                                "empty": "Boş",
                                "equals": "Eşittir",
                                "not": "Değildir",
                                "notEmpty": "Dolu",
                                "without": "Hariç"
                            }
                        },
                        "data": "Veri",
                        "deleteTitle": "Filtreleme kuralını silin",
                        "leftTitle": "Kriteri dışarı çıkart",
                        "logicAnd": "ve",
                        "logicOr": "veya",
                        "rightTitle": "Kriteri içeri al",
                  "title": {
                            "0": "Arama Oluşturucu",
                            "_": "Arama Oluşturucu (%d)"
                        },
                        "value": "Değer",
                        "clearAll": "Filtreleri Temizle"
                    },
                    "searchPanes": {
                        "clearMessage": "Hepsini Temizle",
                        "collapse": {
                            "0": "Arama Bölmesi",
                            "_": "Arama Bölmesi (%d)"
                        },
                        "count": "{total}",
                        "countFiltered": "{shown}\/{total}",
                        "emptyPanes": "Arama Bölmesi yok",
                        "loadMessage": "Arama Bölmeleri yükleniyor ...",
                        "title": "Etkin filtreler - %d"
                    },
                    "searchPlaceholder": "Ara",
                    "thousands": ".",
                    "datetime": {
                        "amPm": [
                            "öö",
                            "ös"
                        ],
                        "hours": "Saat",
                        "minutes": "Dakika",
                        "next": "Sonraki",
                        "previous": "Önceki",
                        "seconds": "Saniye",
                        "unknown": "Bilinmeyen"
                    },
                    "decimal": ",",
                    "editor": {
                        "close": "Kapat",
                        "create": {
                            "button": "Yeni",
                            "submit": "Kaydet",
                            "title": "Yeni kayıt oluştur"
                        },
                        "edit": {
                            "button": "Düzenle",
                            "submit": "Güncelle",
                            "title": "Kaydı düzenle"
                        },
                        "error": {
                            "system": "Bir sistem hatası oluştu (Ayrıntılı bilgi)"
                        },
                        "multi": {
                            "info": "Seçili kayıtlar bu alanda farklı değerler içeriyor. Seçili kayıtların hepsinde bu alana aynı değeri atamak için buraya tıklayın; aksi halde her kayıt bu alanda kendi değerini koruyacak.",
                            "noMulti": "Bu alan bir grup olarak değil ancak tekil olarak düzenlenebilir.",
                            "restore": "Değişiklikleri geri al",
                            "title": "Çoklu değer"
                        },
                        "remove": {
                            "button": "Sil",
                            "confirm": {
                                "_": "%d adet kaydı silmek istediğinize emin misiniz?",
                                "1": "Bu kaydı silmek istediğinizden emin misiniz?"
                            },
                            "submit": "Sil",
                            "title": "Kayıtları sil"
                        }
                    }
                } ,
            });
            //DataTable ends here
            //Ajax Get , _CategoryAddAjaxModal comes here
            $(function () {
                const url = '@Url.Action("Add","Category")';
                const placeHolderDiv = $('#modalPlaceHolder');
                $('#btnAdd').click(function () {
                    $.get(url).done(function (data) {
                        placeHolderDiv.html(data);
                        placeHolderDiv.find(".modal").modal('show');
                    });
                    placeHolderDiv.on('click', '#btnSave',
                        function (event) {
                            event.preventDefault(); //we prevent button's action in modal
                            const form = $('#form-category-add'); //form selected
                            const actionUrl = form.attr('action'); //asp-action selected
                            const dataToSend = form.serialize(); //taking data from form, form serialized
                            $.post(actionUrl, dataToSend).done(function (data) {
                                const categoryAddAjaxModel = jQuery.parseJSON(data);
                                const newFormBody = $('.modal-body', categoryAddAjaxModel.CategoryAddPartial);
                                placeHolderDiv.find('.modal-body').replaceWith(newFormBody); //if lack of data appears that comes out
                                const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                if (isValid) {
                                    placeHolderDiv.find('.modal').modal('hide');
                                    const newTableRow = `
                                      <tr>
                            <td>${categoryAddAjaxModel.CategoryDto.Category.Id}</td>
                            <td>${categoryAddAjaxModel.CategoryDto.Category.Name}</td>
                            <td>${categoryAddAjaxModel.CategoryDto.Category.Description}</td>
                            <td>${convertFirstLetterToUpperCase(categoryAddAjaxModel.CategoryDto.Category.IsActive.toString())}</td>
                            <td>${convertFirstLetterToUpperCase(categoryAddAjaxModel.CategoryDto.Category.IsDeleted.toString())}</td>
                            <td>${categoryAddAjaxModel.CategoryDto.Category.Note}</td>
                            <td>${convertToShortDate(categoryAddAjaxModel.CategoryDto.Category.CreatedDate)}</td>
                            <td>${categoryAddAjaxModel.CategoryDto.Category.CreatedByName}</td>
                            <td>${convertToShortDate(categoryAddAjaxModel.CategoryDto.Category.ModifiedDate)}</td>
                            <td>${categoryAddAjaxModel.CategoryDto.Category.ModifiedByName}</td>
                            <td>
                            <button class="btn btn-primary  btn-block btn-sm btn-update"  data-id="${categoryAddAjaxModel.CategoryDto.Category.Id}"> <span class="fas fa-edit"></span>Düzenle</button>
                            <button class="btn btn-danger btn-delete  btn-block btn-sm" data-id="${categoryAddAjaxModel.CategoryDto.Category.Id}"> <span class="fas fa-minus-circle"></span> Sil</button>
                            </td>
                            </tr>
                                    `;
                                    const newTableRowObject = $(newTableRow); //created js object
                                    newTableRowObject.hide(); //for effective comes
                                    $('#categoriesTable').append(newTableRowObject); //added new row
                                    newTableRowObject.fadeIn(3500); //comes effective
                                    toastr.success(`${categoryAddAjaxModel.CategoryDto.Message}`, 'Başarılı İşlem !');
                                }
                                else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText = '*${text}\n';
                                    });
                                    toastr.warning(summaryText);
                                }
                            });
                        }
                    );
                });
            });
            //Ajax POST Delete category
            $(document).on('click', '.btn-delete',
                function (event) {
                    event.preventDefault();
                    const id = $(this).attr('data-id'); //id attend
                    const tableRow = $(`[name="${id}"]`);
                    const categoryName = tableRow.find('td:eq(1)').text(); //chosed name td
                    Swal.fire({
                        title: 'Silmek istediğinine emin misiniz?',
                        text: `${categoryName} adlı kategori silinicektir.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Evet,silmek istediğime eminim.',
                        cancelButtonText: 'Hayır,silmek istemiyorum.'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                type: 'POST',
                                dataType: 'json',
                                data: { categoryId: id },
                                url: '@Url.Action("Delete","Category")',
                                success: function (data) {
                                    const categoryDto = jQuery.parseJSON(data);
                                    if (categoryDto.ResultStatus === 0) {
                                        Swal.fire(
                                            'Silindi!',
                                            `${categoryDto.Category.Name} adlı kategori silindi`,
                                            'success'
                                        );

                                        tableRow.fadeOut(2000);
                                    }
                                },
                                error: function (err) {
                                    console.log(err);
                                },
                            })
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Bir Hata Oluştu!',
                                text: `${categoryDto.Message}`,
                            })
                        }
                    });
                }
            );
            $(function () {
                const url = `@Url.Action("Update","Category")`;
                const placeHolderDiv = $('#modalPlaceHolder');
                $(document).on('click', '.btn-update', function (event) {
                    event.preventDefault();
                    const id = $(this).attr('data-id');
                    $.get(url, { categoryId: id }).done(function (data) {
                        placeHolderDiv.html(data);
                        placeHolderDiv.find('.modal').modal('show');
                    }).fail(function () { });
                })
            });
        });
    </script>
}
